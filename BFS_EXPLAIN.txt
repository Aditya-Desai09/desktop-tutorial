Includes and Declarations

#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

iostream: For input/output operations (cin, cout).
vector: Used to create adjacency lists for the graph.
queue: Used to implement BFS (FIFO structure).
omp.h: Includes OpenMP functions for parallel processing.
----------------------------------------------------------------------------------------

using namespace std;
Used to avoid prepending std:: before every object or function like cin, cout, vector, etc.
----------------------------------------------------------------------------------------

const int MAX = 100000;
vector<int> graph[MAX];
bool visited[MAX];

MAX: A constant specifying the maximum number of nodes.
graph[]: An array of vectors, each representing an adjacency list for the nodes.
visited[]: A boolean array that tracks whether a node has been visited.
----------------------------------------------------------------------------------------

Parallel BFS Function

void parallelBFS(int start)

Function to perform a parallel BFS starting from the node start.
----------------------------------------------------------------------------------------

queue<int> q;
visited[start] = true;
q.push(start);

q: A queue to store nodes to be processed.
Mark the start node as visited and push it into the queue.
----------------------------------------------------------------------------------------

while (!q.empty()) {
    int levelSize;

    // Protect size reading inside a critical section
    #pragma omp critical
    {
        levelSize = q.size();
    }

While the queue isn't empty, process nodes.
levelSize stores the number of nodes to process at the current level of BFS.
OpenMP #pragma omp critical ensures only one thread can read the queue size at a time (prevents race conditions).
----------------------------------------------------------------------------------------

#pragma omp parallel for
for (int i = 0; i < levelSize; i++) {
    int node;

    // Extract node from queue inside critical to avoid conflicts
    #pragma omp critical
    {
        if (!q.empty()) {
            node = q.front();
            q.pop();
            cout << node << " ";
        }
    }

The #pragma omp parallel for directive splits the current BFS level into parallel tasks.
Each thread processes a node at the current level.
#pragma omp critical ensures thread-safe access to the queue (since multiple threads might access it).
----------------------------------------------------------------------------------------

    // Visit neighbors
    for (int j = 0; j < graph[node].size(); j++) {
        int neighbor = graph[node][j];
        if (!visited[neighbor]) {
            #pragma omp critical
            {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
    }
}

After processing the node, its neighbors are visited.
Each thread checks and pushes unvisited neighbors into the queue. This is done within a critical section to avoid race conditions when accessing shared resources (visited[] and q).
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

Main Function

int main() {
    int n, m, start;
    cout << "Enter number of nodes, edges and start node: ";
    cin >> n >> m >> start;

Takes input for the number of nodes (n), edges (m), and the starting node for BFS (start).
----------------------------------------------------------------------------------------

    cout << "Enter edges (u v):\n";
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u); // Undirected graph
    }

Takes input for m edges. For each edge, both u -> v and v -> u are added to the graph (since it's undirected).
----------------------------------------------------------------------------------------

    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }

Initializes the visited[] array to false in parallel, indicating that no nodes have been visited initially.
----------------------------------------------------------------------------------------

    cout << "\nParallel BFS Traversal: ";
    parallelBFS(start);
    cout << endl;

Calls the parallelBFS() function to start the traversal from the start node and prints the result.
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
